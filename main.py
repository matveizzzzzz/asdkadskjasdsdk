import telebot
import sqlite3
import uuid
import json
import asyncio
import websockets
from telebot import types
import csv
import random
from deep_translator import GoogleTranslator


API_TOKEN = '7955363428:AAETEug-nrrOVhyZMJXSbl61lGFSpBE9giU'
a = 'nRRsqiRDM1W2Avir7EI3qpIy4XkPxjPY'
ADMIN_ID = 7940544491
GENERATION_PRICE = 50

bot = telebot.TeleBot(API_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

def init_db():
    conn = sqlite3.connect('useras.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE,
            user_id INTEGER,
            generations_left INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î

def register_user(username, user_id):
    conn = sqlite3.connect('useras.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT OR IGNORE INTO users (username, user_id) VALUES (?, ?)''', (username, user_id))
    conn.commit()
    conn.close()

def get_generations_left(username):
    conn = sqlite3.connect('useras.db')
    cursor = conn.cursor()
    cursor.execute('SELECT generations_left FROM users WHERE username = ?', (username,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

def decrement_generation(username):
    conn = sqlite3.connect('useras.db')
    cursor = conn.cursor()
    cursor.execute('''UPDATE users SET generations_left = generations_left - 1 WHERE username = ? AND generations_left > 0''', (username,))
    conn.commit()
    conn.close()

def add_generations(username, count):
    conn = sqlite3.connect('useras.db')
    cursor = conn.cursor()
    cursor.execute('''UPDATE users SET generations_left = generations_left + ? WHERE username = ?''', (count, username))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –º—É–∑—ã–∫–∏

import os  # –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω

def get_random_music_file():
    try:
        with open('music.csv', newline='', encoding='utf-8') as csvfile:
            reader = list(csv.DictReader(csvfile))
            if not reader:
                return None, None
            track = random.choice(reader)
            path = os.path.join("music", track['path'])  # –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ music
            return track['title'], path
    except:
        return None, None




# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket

async def create_image(prompt):
    async with websockets.connect('wss://ws-api.runware.ai/v1') as websocket:
        await websocket.send(json.dumps([{"taskType": "authentication", "apiKey": a}]))
        await websocket.recv()

        request = [{
            "positivePrompt": prompt,
            "model": "runware:100@1",
            "steps": 4,
            "width": 512,
            "height": 512,
            "numberResults": 1,
            "outputType": ["URL"],
            "taskType": "imageInference",
            "taskUUID": uuid.uuid4().hex
        }]

        await websocket.send(json.dumps(request))
        response = await websocket.recv()
        return json.loads(response)['data'][0]['imageURL']

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

@bot.message_handler(commands=['start'])
def handle_start(message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    register_user(username, message.from_user.id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "üíé –ü–æ–∫—É–ø–∫–∞")
    markup.row("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üéµ –†–∞–Ω–¥–æ–º–Ω–∞—è –º—É–∑—ã–∫–∞", "üí∞ –ë–∞–ª–∞–Ω—Å")

    try:
        with open("welcome.jpg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
                        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
            )
    except FileNotFoundError:
        bot.send_message(message.chat.id, "(—Ñ–∞–π–ª welcome.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –Ω–∞–¥–æ –æ—Ç–¥–µ–ª—å–Ω–æ)
    bot.send_message(
        message.chat.id,
        "üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def check_balance(message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    register_user(username, message.from_user.id)
    balance = get_generations_left(username)
    bot.send_message(
        message.chat.id,
        f"üí∞ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üíé –ü–æ–∫—É–ø–∫–∞'",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda m: m.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
def menu_generate(message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    register_user(username, message.from_user.id)
    try:
        with open("welcomee.jpg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=
        "üñåÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ - —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Å–æ–∑–¥–∞–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:</i>\n"
        "‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ\n"
        "‚Ä¢ –§—ç–Ω—Ç–µ–∑–∏–π–Ω—ã–π –∑–∞–º–æ–∫ –Ω–∞ –≥–æ—Ä–µ, —Ü–∏—Ñ—Ä–æ–≤–∞—è –∂–∏–≤–æ–ø–∏—Å—å\n"
        "‚Ä¢ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫",
        parse_mode='HTML'
    )
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! (—Ñ–∞–π–ª welcome.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)")

@bot.message_handler(func=lambda m: m.text == "üíé –ü–æ–∫—É–ø–∫–∞")
def menu_purchase(message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    register_user(username, message.from_user.id)
    bot.send_message(
        message.chat.id,
        f"üíé <b>–ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π</b>\n\n"
        f"10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π = {GENERATION_PRICE}‚ÇΩ\n\n"
        "–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É: @isntmiller\n\n"
        "<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.</i>",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def menu_info(message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    register_user(username, message.from_user.id)
    balance = get_generations_left(username)
    text = (
        "üëã *–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ:*\n\n"
        "ü§ñ –Ø ‚Äî –±–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n"
        "‚úèÔ∏è –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥\n"
        "üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ª—é–±—ã–µ —Å—Ç–∏–ª–∏: —Ä–µ–∞–ª–∏–∑–º, –∞–Ω–∏–º–µ, —Ñ—ç–Ω—Ç–µ–∑–∏ –∏ –¥—Ä—É–≥–∏–µ\n"
        "üì• –ú—É–∑—ã–∫—É –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ '–†–∞–Ω–¥–æ–º–Ω–∞—è –º—É–∑—ã–∫–∞'\n"
        "üíé –ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—é—Ç—Å—è –ª–∏–º–∏—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        f"üìä *–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å*: {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        "üõçÔ∏è –•–æ—á–µ—à—å –±–æ–ª—å—à–µ? –ö—É–ø–∏ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤—Å–µ–≥–æ –∑–∞ 50‚ÇΩ (—á–µ—Ä–µ–∑ '–ü–æ–∫—É–ø–∫–∞')\n"
        "üë®‚Äçüíº –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º: @isntmiller\n"
        "‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: WebSocket + Runware AI\n"
        "üß† –í –æ—Å–Ω–æ–≤–µ –ª–µ–∂–∏—Ç –º–æ—â–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞\n"
        "üìö –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –±–∞–∑–µ\n"
        "üîí –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "üôè –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –±–æ—Ç–æ–º!"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")


@bot.message_handler(func=lambda m: m.text == "üéµ –†–∞–Ω–¥–æ–º–Ω–∞—è –º—É–∑—ã–∫–∞")
def menu_music(message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    register_user(username, message.from_user.id)
    title, filepath = get_random_music_file()
    print(f"[DEBUG] Trying to open file: {filepath}")  # ‚Üê –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤—å
    if title and filepath:
        try:
            with open(filepath, 'rb') as audio:
                bot.send_audio(message.chat.id, audio, caption=f"üéµ {title}")
        except FileNotFoundError:
            bot.send_message(message.chat.id,"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    else:
        bot.send_message(message.chat.id,
                         "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(commands=['add'])
def handle_add(message):
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        _, username, count = message.text.split()
        add_generations(username, int(count))
        bot.send_message(message.chat.id,
                         f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
    except:
        bot.send_message(message.chat.id,
                         "‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: /add username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")

@bot.message_handler(func=lambda m: True)
def handle_prompt(message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    register_user(username, message.from_user.id)
    if get_generations_left(username) <= 0:
        return bot.send_message(
            message.chat.id,
            "üò¢ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üíé –ü–æ–∫—É–ø–∫–∞'")

    prompt = message.text
    translated_prompt = GoogleTranslator(source='auto', target='en').translate(prompt)


    prompt = message.text
    if len(prompt) > 500:
        return bot.send_message(
            message.chat.id,
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")

    msg = bot.send_message(
        message.chat.id,
        f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n<i>{prompt}</i>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10-20 —Å–µ–∫—É–Ω–¥...",
        parse_mode='HTML'
    )

    async def process():
        try:
            image_url = await create_image(translated_prompt)
            decrement_generation(username)
            bot.send_photo(message.chat.id, image_url,
                           caption=f"üé® –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{prompt}",)
            bot.delete_message(message.chat.id, msg.message_id)
        except Exception as e:
            bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    asyncio.run(process())

if __name__ == '__main__':
    bot.infinity_polling()
