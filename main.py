import telebot
from telebot import types
import sqlite3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7868151791:AAFz7ZWDrXom4GWk6GjHbHis-RkAIrs_x64")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (username TEXT PRIMARY KEY, activations INTEGER, chat_id INTEGER)''')
conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ chat_id
cursor.execute("PRAGMA table_info(users)")
columns = cursor.fetchall()
column_names = [column[1] for column in columns]

if 'chat_id' not in column_names:
    cursor.execute("ALTER TABLE users ADD COLUMN chat_id INTEGER")
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    username = message.from_user.username
    chat_id = message.chat.id
    if not username:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM users WHERE username=?", (username,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (username, activations, chat_id) VALUES (?, 0, ?)", (username, chat_id))
        conn.commit()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å emoji
    markup = types.ReplyKeyboardMarkup(row_width=3)
    item1 = types.KeyboardButton('üòÄ')
    item2 = types.KeyboardButton('üòé')
    item3 = types.KeyboardButton('ü§ñ')
    item4 = types.KeyboardButton('üê±')
    item5 = types.KeyboardButton('üöÄ')
    item6 = types.KeyboardButton('üéâ')
    markup.add(item1, item2, item3, item4, item5, item6)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π —Å–º–∞–π–ª:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∞
@bot.message_handler(func=lambda message: message.text in ['üòÄ', 'üòé', 'ü§ñ', 'üê±', 'üöÄ', 'üéâ'])
def check_emoji(message):
    bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())
    show_main_menu(message.chat.id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton("–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥", callback_data='catalog')
    item2 = types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
    item3 = types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='add_balance')
    markup.add(item1, item2, item3)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == 'catalog':
        show_catalog(call.message.chat.id)
    elif call.data == 'profile':
        show_profile(call.message.chat.id, call.from_user.username)
    elif call.data == 'add_balance':
        bot.send_message(call.message.chat.id, "–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
def show_catalog(chat_id):
    markup = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton("–°—Ö–µ–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞", callback_data='earnings')
    item2 = types.InlineKeyboardButton("–°–æ—Ü —Å–µ—Ç–∏", callback_data='social')
    item3 = types.InlineKeyboardButton("Seed —Ñ—Ä–∞–∑—ã", callback_data='seed')
    markup.add(item1, item2, item3)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def show_profile(chat_id, username):
    cursor.execute("SELECT activations FROM users WHERE username=?", (username,))
    activations = cursor.fetchone()[0]
    bot.send_message(chat_id, f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nUsername: @{username}\n–ë–∞–ª–∞–Ω—Å: {activations}‚ÇΩ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–∞–∫—Ç–∏–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['–∞–∫—Ç–∏–≤'])
def add_activation(message):
    if message.from_user.username == "Qwoxyzz":  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –∞–¥–º–∏–Ω–∞
        try:
            username = message.text.split()[1]
            usern = int(message.text.split()[2])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
            cursor.execute("SELECT chat_id FROM users WHERE username=?", (username,))
            user_data = cursor.fetchone()

            if user_data:
                chat_id = user_data[0]
                cursor.execute("UPDATE users SET activations = activations + ? WHERE username=?", (usern, username))
                conn.commit()
                bot.send_message(message.chat.id, f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} ({usern}‚ÇΩ)")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_message(chat_id, f"–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ —Å—É–º–º—É {usern}‚ÇΩ. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.")
            else:
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        except IndexError:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–∞–∫—Ç–∏–≤ username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        except ValueError:
            bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)